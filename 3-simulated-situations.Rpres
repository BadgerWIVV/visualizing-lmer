3-simulated-situations
======================
author: Pierce Edmiston
date: 1/21/2015
css: visualizing-lmer.css
```{r setup, echo = FALSE, warning = FALSE}
# --------------------------------------------------------------
library(broom)
library(MASS)  # namespace overlap for select; load before dplyr
library(dplyr)
library(ggplot2)
library(knitr)
library(lme4)
library(reshape2)
library(yaml)

project_settings <- yaml.load_file("visualizing-lmer.yaml")

opts_chunk$set(
  fig.align = "center",
  fig.width = project_settings[["opts_width_facet"]],
  fig.height = project_settings[["opts_height_facet"]]
)

gg_base_size <- project_settings[["gg_base_size"]]

names(sleepstudy) <- tolower(names(sleepstudy))
days_map <- dplyr::data_frame(  
    days = unique(sleepstudy$days),
    days_c = days - median(days)
  )
sleepstudy <- left_join(sleepstudy, days_map)
sleepstudy <- sleepstudy %>% 
  select(subject, days, days_c, reaction)
```
`github.com/pedmiston/visualizing-lmer`

Part 3
======
* simulation 1: correlation between intercept and slope
* simulation 2: correlation between slope and residuals

Mixed effects model formulas
============================
![](img/lmer-syntax.png)

What does the correlation parameter do?
=======================================
```{r}
uncorrelated <- lmer(reaction ~ days_c + (days_c || subject),
                     data = sleepstudy)
uncorrelated@call

correlated   <- lmer(reaction ~ days_c + (days_c |  subject),
                     data = sleepstudy)
correlated@call
```

Correlation parameter
=====================
```{r}
anova(uncorrelated, correlated)
VarCorr(uncorrelated)
VarCorr(correlated)
```

What's the "actual" correlation?
================================
```{r}
lm_list <- lmList(reaction ~ days_c | subject, 
                  data = sleepstudy)
lm_effects <- coef(lm_list)
cor(lm_effects[1], lm_effects[2])
```

Fixed effects are the same*
===========================
```{r}
tidy(uncorrelated, effects = "fixed")
tidy(correlated,   effects = "fixed")
```

Simulation 1
============
* one set of subject effects (intercepts and slopes)
* two situations: one correlated, one uncorrelated

Reverse engineering
===================
```{r}
subj_effects <- tidy(uncorrelated) %>%
  dcast(level ~ term, value.var = "estimate") %>%
  select(subject = 1, intercept = 2, slope = 3)
subj_effects
```

Reverse engineering
===================
```{r}
subj_data <- expand.grid(
    subject = subj_effects$subject, days = 0:9
  ) %>% 
  left_join(subj_effects) %>%
  left_join(days_map) %>%
  arrange(subject, days) %>%
  mutate(residual = residuals(uncorrelated)) %>%
  select(subject, days, days_c, intercept, slope, residual)
head(subj_data, n = 12)
```

Reverse engineering
===================
```{r}
subj_data <- subj_data %>% 
  mutate(reaction = intercept + (slope * days_c) + residual)
head(subj_data, n = 12)
```

Sanity check
============
```{r, echo = FALSE}
cbind(
  subj_data %>% 
    filter(subject == 308) %>% 
    select(subject, days, reaction), 
  sleepstudy %>% 
    filter(subject == 308) %>% 
    select(subject, days, reaction)
)
```

Simulated effects
=================
```{r}
source("R/simulate.R")

num_subjects <- 24
grand_means <- data.frame(
  term = c("intercept", "slope"),
  mean = c(300, 4), 
  sd   = c(38, 10)
)
grand_means
```

Simulated effects
=================
```{r}
correlations <- c("intercept_slope" = 0.9)
cor_matrix <- to_cor_matrix(correlations, grand_means$term)
cor_matrix
```

Simulated effects
=================
```{r}
correlated_effects <- generate_subject_effects(
  num_subjects, grand_means, cor_matrix, seed = 12
)
head(correlated_effects)
cor(correlated_effects$intercept, correlated_effects$slope)
```

Uncorrelated subject effects
============================
Brute force approach
```{r}
set.seed(51)

intercepts <- correlated_effects$intercept
uncorrelated_slopes <- correlated_effects$slope

i <- 1
repeat {
  current <- cor(intercepts, uncorrelated_slopes)
  
  if ( abs(current) <= 0.1 ) {
    break
  } else if (i > 10000) {
    warning("Maximum iteration limit reached")
    break
  }

  uncorrelated_slopes <- sample(uncorrelated_slopes)
}

cor(intercepts, uncorrelated_slopes)
```

Permutations of the same parameters
===================================
```{r}
subj_effects <- correlated_effects %>%
  rename(corr_slope = slope) %>%
  mutate(uncorr_slope = uncorrelated_slopes)
head(subj_effects)

```

Expand and add residual error
=============================
```{r}
subj_data <- expand.grid(
    subject = subj_effects$subject, days = 0:9
  ) %>%
  left_join(subj_effects) %>%
  left_join(days_map) %>%
  arrange(subject, days) %>%
  mutate(residual = rnorm(n = n(), mean = 0, sd = 25)) %>%
  select(subject, days, days_c, 
         intercept, corr_slope, uncorr_slope, residual)
head(subj_data, n = 12)
```

Simulate the experiment
=======================
```{r}
subj_data <- subj_data %>% mutate(
    corr_reaction=intercept + (corr_slope*days_c) + residual,
    uncorr_reaction=intercept + (uncorr_slope*days_c) + residual
  )
```

Plot correlated
===============
```{r, echo = FALSE}
plot_simulation <- function(frame, y_col) {
  lm_formula <- as.formula(paste0(y_col, " ~ days_c | subject"))
  lm_effects <- lmList(lm_formula, frame)
  increasing_slope <- coef(lm_effects) %>% as.data.frame(.)
  increasing_slope$subject <- row.names(increasing_slope)
  increasing_slope <- increasing_slope %>% 
    arrange(days_c) %>% .[["subject"]]
  frame$subject <- factor(frame$subject, 
                          levels = increasing_slope)
  
  ggplot(frame, aes_string(y = y_col, x = "days_c")) +
    geom_point(aes(color = subject)) +
    facet_wrap("subject", ncol = 6) +
    scale_x_continuous(
      "Sleep Deprivation (days)", 
      breaks = days_map$days_c,
      labels = days_map$days
    ) + 
    scale_y_continuous(
      "Average Reaction Time (ms)",
      breaks = seq(150, 500, by = 50)
    ) +
    theme_bw(base_size = gg_base_size) +
    theme(legend.position = "none")
}
```
```{r}
plot_simulation(subj_data, "corr_reaction")
```

Plot uncorrelated
=================
```{r}
plot_simulation(subj_data, "uncorr_reaction")
```

Same numbers, different order
=============================
```{r}
tidy( lm(corr_slope ~ 1, subj_effects) )
tidy( lm(uncorr_slope ~ 1, subj_effects) )
```

As expected, almost identical
=============================
```{r}
corr_list   <- lmList(  corr_reaction ~ days_c | subject, 
                      subj_data)
uncorr_list <- lmList(uncorr_reaction ~ days_c | subject,
                      subj_data)

tidy( lm(days_c ~ 1, coef(corr_list)) )
tidy( lm(days_c ~ 1, coef(uncorr_list)) )
```

What about lmer?
================
```{r}
lmer_corr   <-lmer(  corr_reaction ~ days_c + (days_c|subject),
                   data = subj_data)

lmer_uncorr <-lmer(uncorr_reaction ~ days_c + (days_c||subject), 
                   data = subj_data)

tidy(lmer_corr,   effects = "fixed")
tidy(lmer_uncorr, effects = "fixed")
```

Same data, with/without
=======================
```{r}
without_corr <- lmer(corr_reaction ~ days_c + (days_c||subject),
                     data = subj_data)
tidy(lmer_corr, effects = "fixed")
tidy(without_corr, effects = "fixed")
```

VarCorr()
=========
```{r}
VarCorr(lmer_corr)

VarCorr( lmer(uncorr_reaction ~ days_c + (days_c|subject),
              data = subj_data) )
```

Simulation 2
============
What if someone who shows a strong effect also has a lot of error?

Error for each subject
======================
```{r}
source("R/simulate.R")

num_subjects <- 24
grand_means <- data.frame(
  term = c("intercept", "slope", "error"),
  mean = c(300, 5, 35), 
  sd   = c(38, 10, 20)
)
grand_means
```

Make the subject effects
========================
```{r, echo = -6}
correlations <- c("intercept_slope" = 0.0, 
                  "intercept_error" = 0.0, 
                  "slope_error" = 0.8)
cor_matrix <- to_cor_matrix(correlations, grand_means$term)

correlated_effects <- generate_subject_effects(
  num_subjects, grand_means, cor_matrix, seed = 24
)
head(correlated_effects)
cor(correlated_effects[,c("intercept", "slope", "error")]) %>%
  round(., 2) 
```

Brute force again
=================
```{r}
set.seed(51)

intercepts <- correlated_effects$intercept
slopes <- correlated_effects$slope
uncorrelated_error <- correlated_effects$error

i <- 1
repeat {
  current_intercepts <- cor(intercepts, uncorrelated_error)
  current_slopes     <- cor(slopes, uncorrelated_error)
  
  if ( abs(current_intercepts) <= 0.1 & 
       abs(current_slopes)     <= 0.1 ) {
    break
  } else if (i > 10000) {
    warning("Maximum iteration limit reached")
    break
  }

  uncorrelated_error <- sample(uncorrelated_error)
}

cor(cbind(intercepts, slopes, uncorrelated_error)) %>%
  round(., 2)
```

Make the data
=============
Use the error term as the sd of the residual distribution.
```{r}
subj_effects <- correlated_effects %>%
  rename(corr_error = error) %>%
  mutate(uncorr_error = uncorrelated_error)

subj_data <- expand.grid(
    subject = subj_effects$subject, days = 0:9
  ) %>%
  left_join(subj_effects) %>%
  left_join(days_map) %>%
  arrange(subject, days) %>%
  group_by(subject) %>%
  mutate(
    corr_residual = rnorm(n = n(), mean = 0, sd = corr_error),
    uncorr_residual=rnorm(n = n(), mean = 0, sd = uncorr_error)
  ) %>% ungroup() %>%
  select(subject, days, days_c, 
         intercept, slope, corr_residual, uncorr_residual)
head(subj_data, n = 12)
```

Recreate the experiment
=======================
```{r}
subj_data <- subj_data %>% mutate(
    corr_reaction =intercept + (slope*days_c) + corr_residual,
    uncorr_reaction=intercept + (slope*days_c) +uncorr_residual
  )
```

Plot correlated
===============
```{r}
plot_simulation(subj_data, "corr_reaction")
```

Plot uncorrelated
=================
```{r}
plot_simulation(subj_data, "uncorr_reaction")
```

lmList should be the same
=========================
Population mean is 5.
```{r}
corr_list   <- lmList(  corr_reaction ~ days_c | subject, 
                      subj_data)
uncorr_list <- lmList(uncorr_reaction ~ days_c | subject,
                      subj_data)

tidy( lm(days_c ~ 1, coef(corr_list)) )
tidy( lm(days_c ~ 1, coef(uncorr_list)) )
```

Does lmer do better?
====================
```{r}
lmer_corr   <- lmer(  corr_reaction ~ days_c +(days_c|subject),
                    data = subj_data)

lmer_uncorr <- lmer(uncorr_reaction ~ days_c+(days_c||subject),
                    data = subj_data)

tidy(lmer_corr, effects = "fixed")
tidy(lmer_uncorr, effects = "fixed")
```

Same data, with/without
=======================
```{r}
without_corr <- lmer(corr_reaction ~ days_c + (days_c||subject),
                     data = subj_data)
tidy(lmer_corr, effects = "fixed")
tidy(without_corr, effects = "fixed")
```

Poking around
=============
```{r}
VarCorr(lmer_corr)
VarCorr( lmer(uncorr_reaction ~ days_c + (days_c|subject), 
              data = subj_data) )
```

Conclusions
===========
* No evidence that correlation parameters help obtain unbiased predictors
* Maybe they help when clusters are unbalanced? Other ideas?

Other things to check out in lmer
=================================
* Fully nested designs: `lmer(y ~ x + (x||g1/g2))`
* Orthogonal clusters: `lmer(y ~ x + (x|subjects) + (x|items))`
