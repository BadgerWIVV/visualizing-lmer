2-lmer-model-object
===================
author: Pierce Edmiston
date: 1/21/2015
css: visualizing-lmer.css
```{r setup, echo = FALSE, warning = FALSE}
# --------------------------------------------------------------
library(broom)
library(car)
library(dplyr)
library(lme4)
library(ggplot2)
library(knitr)
library(reshape2)
library(yaml)

project_settings <- yaml.load_file("visualizing-lmer.yaml")

opts_chunk$set(
  fig.align = "center",
  fig.width = project_settings[["opts_width"]],
  fig.height = project_settings[["opts_height"]]
)

gg_base_size <- project_settings[["gg_base_size"]]

names(sleepstudy) <- tolower(names(sleepstudy))
sleepstudy <- select(sleepstudy, subject, days, reaction)
```
`github.com/pedmiston/visualizing-lmer`

Part 2
======
* the lmer model object
* random intercepts and random slopes

More sleep data
===============
```{r, echo = -1}
# ?sleepstudy
library(lme4)
head(sleepstudy, n = 12)
( N <- length(unique(sleepstudy$subject)) )
```

Centering*
==========
```{r, echo = c(-4, -7)}
unique(sleepstudy$days)
# use dplyr::data_frame to build incrementally
days_map <- dplyr::data_frame(  
    days = unique(sleepstudy$days),
    days_c = days - median(days)
  )
days_map

sleepstudy <- left_join(sleepstudy, days_map)
sleepstudy <- sleepstudy %>% 
  select(subject, days, days_c, reaction)
```

Base plot
=========
```{r, echo = 3}
theme_colors <- list(
  green = "#66c2a5",  # colorbrewer.org
  orange = "#fc8d62", #
  blue = "#8da0cb"    #
)

base_plot <- ggplot(sleepstudy, aes(x = days_c, y = reaction)) +
  geom_point(position = position_jitter(0.2, 0.0), 
    size = 4, color = theme_colors[["green"]])

base_plot <- base_plot +
  scale_x_continuous(
    "Sleep Deprivation (days)", 
    breaks = days_map$days_c,
    labels = days_map$days
  ) + 
  scale_y_continuous(
    "Average Reaction Time (ms)",
    breaks = seq(150, 500, by = 50)
  ) +
  theme_bw(base_size = gg_base_size) +
  theme(legend.position = "none")

base_plot
```

Ignoring subject (1)
====================
```{r}
simple_lm <- lm(reaction ~ days_c, data = sleepstudy)
y_estimates <- predict(simple_lm, days_map, se.fit = TRUE)
estimates <- cbind(days_map, y_estimates) %>%
  select(days, days_c, reaction = fit, se = se.fit)
```

Ignoring subject (2)
====================
```{r}
base_plot + geom_smooth(data = estimates,
  mapping = aes(ymin = reaction-se, ymax = reaction+se),
  stat = "identity", color = theme_colors[["blue"]], size = 2)
```

Repeated measures design
========================
```{r, echo = FALSE}
opts_chunk$set(
  fig.width = project_settings[["opts_width_facet"]]
)
```
```{r, echo = 1:2}
# color by subject; remove jitter
base_plot$layers[[1]] <- geom_point(aes(color = subject), 
                                    size = 4)
base_plot
```

facet_wrap()
============
```{r, echo = 1}
subj_base_plot <- base_plot + facet_wrap("subject", ncol = 6)
subj_base_plot
```

Layer on the estimates
======================
```{r}
subj_base_plot + geom_smooth(data = estimates,
  mapping = aes(ymin = reaction-se, ymax = reaction+se),
  stat = "identity", color = "gray", size = 2)
```

Problems
========
* many formal reasons why this is incorrect
* informal: not modeling the average subject

Method 1
========
Fit an lm for every subject
```{r}
extract_lm_coef <- function(y, x, coef) {
  mod <- lm(y ~ x)
  coef(mod)[coef]
}

lm_effects <- sleepstudy %>% 
  group_by(subject) %>%
  summarize(
    intercept = extract_lm_coef(reaction, days_c, 1),
    slope     = extract_lm_coef(reaction, days_c, 2)
  )

head(lm_effects, n = 6)
```

Is the average slope greater than 0?
====================================
```{r, echo = 1}
slopes_mod <- lm(slope ~ 1, data = lm_effects)
tidy(slopes_mod)
```

The easy button
===============
```{r}
lmList(reaction ~ days | subject, data = sleepstudy)
```

Method 2
========
Think about it hierarchically
```{r, echo = 1}
lmer_mod <- lmer(reaction ~ days_c + (days_c||subject),
                 data = sleepstudy)
tidy(lmer_mod, effects = "fixed")
```

Compare
=======
```{r}
tidy(slopes_mod)
tidy(lmer_mod, effects = "fixed")
```

What's in an lmer model object?
===============================
```{r}
summary(lmer_mod)
```

Fixed effects
=============
```{r}
fixef(lmer_mod)
tidy(lmer_mod, effects = "fixed")
```

Random effects
==============
```{r, echo = c(1,3)}
ranef(lmer_mod)
random_effects <- ranef(lmer_mod)[["subject"]]
colMeans(random_effects)
```

coef() = fixef() + ranef()
==========================
```{r, echo = 1}
coef(lmer_mod)
```

Tidy them up
============
```{r}
tidy(lmer_mod, effects = "random")
```

A line for every subject
========================
```{r, echo = 1}
lmer_effects <- tidy(lmer_mod, effects = "random") %>%
  dcast(level ~ term, value.var = "estimate") %>%
  select(subject = 1, intercept = 2, slope = 3)
lmer_effects
```

gg_magic
========
```{r, echo = 1}
subj_plot <- subj_base_plot + 
  geom_abline(data = lmer_effects, size = 2,
    mapping = aes(intercept = intercept, 
                  slope = slope, 
                  color = subject))
subj_plot
```

Sort by slope
=============
```{r, echo = -4}
increasing_slope <- lmer_effects %>% 
  arrange(slope) %>% .[["subject"]]
sleepstudy$subject <- factor(sleepstudy$subject, 
                             levels = increasing_slope)
```

gg_update
=========
```{r, echo = 1}
subj_plot <- subj_plot %+% sleepstudy
subj_plot
```

Comparing lmer to lmList (1)
============================
```{r, echo = FALSE}
tmp_plot <- subj_plot
tmp_plot$layers[[1]] <- geom_blank()
tmp_plot + geom_abline(data = lm_effects, 
  lty = 2, size = 2,
  mapping = aes(intercept = intercept, 
                slope = slope, 
                color = subject))
```

Shrinkage
=========
```{r, echo = FALSE, fig.show = "hold", fig.width = project_settings[["opts_width"]] * 2/3, fig.height = project_settings[["opts_height"]] * 2/3}
compare <- merge(lm_effects, lmer_effects, by = "subject", 
                 suffixes = c("_lmList", "_lmer"))

ggplot(compare, aes(x = intercept_lmer, y = intercept_lmList)) +
  geom_point(size = 4) +
  geom_abline(intercept = 0, slope = 1, lty = 2, size = 1) +
  theme_bw(base_size = gg_base_size) +
  ggtitle("Intercepts")

ggplot(compare, aes(x = slope_lmer, y = slope_lmList)) +
  geom_point(size = 4) +
  geom_abline(intercept = 0, slope = 1, lty = 2, size = 1) +
  theme_bw(base_size = gg_base_size) +
  ggtitle("Slopes")
```

predictSE()
===========
```{r, echo = -3}
library(AICcmodavg)
estimates <- predictSE(lmer_mod, days_map, se.fit = TRUE) %>%
  cbind(days_map, .) %>% rename(reaction = fit, se = se.fit)
estimates
```

Final plot
==========
```{r}
subj_plot + geom_smooth(data = estimates,
  mapping = aes(ymin = reaction-se, ymax = reaction+se), 
  stat = "identity", color = "gray")
```
