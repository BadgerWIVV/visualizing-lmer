1-plotting-regressions
======================
author: Pierce Edmiston
date: 1/21/2015
css: visualizing-lmer.css
```{r setup, echo = FALSE, warning = FALSE}
# --------------------------------------------------------------
library(broom)
library(car)
library(dplyr)
library(ggplot2)
library(knitr)
library(reshape2)
library(yaml)

project_settings <- yaml.load_file("visualizing-lmer.yaml")

opts_chunk$set(
  fig.align = "center",
  fig.width = project_settings[["opts_width"]],
  fig.height = project_settings[["opts_height"]]
)

gg_base_size <- project_settings[["gg_base_size"]]
```
`github.com/pedmiston/visualizing-lmer`

Part 1
======
* ggplot's grammar of graphics
* visualizing simple linear regression

Student's sleep data
====================
```{r, echo = 4}
# ?sleep
sleep <- select(sleep, -ID)  # ignore ID for now
sleep$group <- recode(sleep$group, 
  "'1' = 'drug_x'; '2' = 'drug_y'", 
  as.factor = FALSE)
( N = nrow(sleep) )
sleep
```

Dealing with factors
====================
```{r}
sleep$group_c <- recode(sleep$group, as.numeric = TRUE,
  recodes = "'drug_x' = -0.5; 'drug_y' = 0.5")
table( sleep[,c("group", "group_c")] )
```

Build plot on observations
==========================
```{r, echo = 1}
base_plot <- ggplot(sleep, aes(x = group_c, y = extra)) +
  geom_point(aes(color = factor(group_c)), size = 5,
             position = position_jitter(0.1, 0.0))

theme_colors <- list(
  green = "#66c2a5",  # colorbrewer.org
  orange = "#fc8d62", #
  blue = "#8da0cb"    #
)

base_plot <- base_plot +
  scale_x_continuous("Assignment", 
    breaks = c(-0.5, 0.5),
    labels = c("Drug X", "Drug Y")
  ) +
  scale_y_continuous("Extra Sleep (hr)",
    breaks = -2:6
  ) +
  scale_color_manual(
    values = c(theme_colors[["green"]], theme_colors[["blue"]])
  ) +
  coord_cartesian(xlim = c(-1.1, 1.1)) +
  theme_bw(base_size = gg_base_size) +
  theme(legend.position = "none")
base_plot
```

Use stat_summary() to add descriptives
======================================
```{r, echo = 1}
base_plot + stat_summary(fun.data = mean_se, 
    geom = "pointrange", shape = 18, size = 2, 
    color = theme_colors[["orange"]])
```

Easily add new data
===================
```{r, echo = 1}
custom_error <- sleep %>% group_by(group_c) %>% 
  summarize(
    se = sqrt( var(extra)/n() ), 
    extra = mean(extra)  # note the order
  )
base_plot + 
  stat_summary(fun.data = mean_se, 
    geom = "pointrange", shape = 18, size = 2, 
    color = theme_colors[["orange"]]) +
  geom_linerange(data = custom_error, size = 2,
    mapping = aes(x = group_c + 0.1,  # bump right
                  ymin = extra - se, 
                  ymax = extra + se))
```

Fitting a model
===============
Linear regression
```{r, echo = 1}
sleep_mod <- lm(extra ~ group_c, data = sleep)
params <- tidy(sleep_mod)  # library(broom)
params
```

_t_-test
```{r, echo = 1}
sleep_test <- t.test(extra ~ group_c, data = sleep)
tidy(sleep_test) %>% select(estimate, statistic, p.value)
```

geom_abline() takes formulas
============================
```{r, echo = 1}
abline_plot <- base_plot + 
  geom_abline(intercept = 1.54, slope = 1.58,
              size = 2, color = theme_colors[["orange"]])
abline_plot
```

Sanity check
============
```{r}
abline_plot + stat_summary(fun.y = mean, geom = "point", 
  shape = 16, size = 8, color = theme_colors[["orange"]])
```

Points on a line segment with predict()
=======================================
```{r}
x_values <- data.frame(group_c = seq(-0.5, 0.5, by = 0.1))
y_values <- predict(sleep_mod, newdata = x_values)
estimates <- data.frame(x_values, extra = y_values)
```

Interpolation and extrapolation
===============================
The values in our data
```{r, echo = FALSE}
filter(estimates, group_c %in% c(-0.5, 0.5))
```

But remember what predict() is doing
```{r}
estimates
```

Skinning cats
=============
```{r}
abline_plot + geom_point(data = estimates, 
  shape = 16, size = 8, color = theme_colors[["orange"]])
```

se.fit = TRUE
=============
```{r, echo = 1}
estimates <- predict(sleep_mod, x_values, se.fit = TRUE) %>%
  cbind(x_values, .) %>% 
  select(group_c, extra = fit, se = se.fit)
estimates
tidy(sleep_mod)
```

Re-center, re-fit
=================
```{r, echo = 1:2}
move_intercept <- function(center) {
  re_center <- sleep$group_c - center
  re_fit <- lm(sleep$extra ~ re_center)
  tidy(re_fit)[[1,3]] # (Intercept) error
}
manual_se <- sapply(estimates$group_c, move_intercept)
cbind(estimates, manual_se = manual_se)
```

Grammar of linear regression
============================
```{r, echo = -4}
sleep_mod <- lm(extra ~ group_c, sleep)
groups <- data.frame(group_c = unique(sleep$group_c))
estimates <- predict(sleep_mod, groups, se.fit = TRUE) %>%
  cbind(groups, .) %>% select(group_c, extra=fit, se=se.fit)
estimates
```

Final plot
==========
```{r, echo = FALSE}
sleep_plot <- base_plot + 
  geom_bar(aes(fill = as.factor(group_c)), data = estimates, 
    stat = "identity", alpha = 0.4, color = "black") +
  geom_linerange(aes(ymin = extra - se, ymax = extra + se),
    data = estimates, size = 1.0)
sleep_plot <- sleep_plot +
  scale_fill_manual(
    values = c(theme_colors[["green"]], theme_colors[["blue"]])
  )
sleep_plot
```
